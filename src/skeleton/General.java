import java.util.ArrayList;

public class General {
	private AbstractBlock PosBlock;
	private Direction direction;
	private int lives = 3;
	private int ZPMCnt = 0;
	private int allZPMCnt;
	private ArrayList<Box> boxes;
	
	//A General konstruktora
	//3 az alapbe√°ll√≠tott √©letek sz√°ma, be√°ll√≠tja, hogy nincs n√°la ZPM
	//sem pedig doboz.
	public General(){
		boxes = new ArrayList<Box>();
	}
	public General(ArrayList<Box> boxes){
		this.boxes = new ArrayList<Box>(boxes);
	}
	//visszaadja az ezredes pozici√≥j√°t
	public AbstractBlock getPosBlock(){ 
		System.out.println("General.getPosBlock()");
		return PosBlock;
	}
	
	//a kapott ir√°nyba √°ll√≠tja az ezredes ir√°ny√°t
	public void setDirection(Direction dir){
		System.out.println("General.setDirection("+ dir +")");
		this.direction = dir;
	}
	
	//visszaadja az ezredes ir√°ny√°t
	public Direction getDirection(){
		System.out.println("General.getDirection()");
		return direction;
	}
	
	//be√°ll√≠tja az ezredes pozici√≥j√°t a kapott blokkra
	public void setPosBlock(AbstractBlock block){
		System.out.println("General.setPosBlock(block)");
		PosBlock = block;
	}
	
	//Ha megh√≠vj√°k, akkor az ezredes ZPM sz√°ml√°l√≥ja megn≈ë eggyel
	//(az oszt√°lydiagrammal ellent√©tben nem kell megkapja mag√°t a modult)
	public void collectZpm(){ 
		System.out.println("General.collectZPM()");		
		ZPMCnt++;
		
		//itt megn√©zz√ºk, hogy felszedt√ºk-e az √∂sszes ZPM-et
		//ha igen, akkor jelezz√ºk az Applicationnek, hogy nyert√ºnk.
		if(ZPMCnt == allZPMCnt)
			Application.endGame("WIN!");
	}
	
	//ha megh√≠vj√°k, akkor meghal az ezredes. 
	public void die(){
		//megn√©zi, hogy van e m√©g veszthet≈ë √©lete, ha nincs jelezz√ºk, hogy vesztett a j√°t√©kos.
		if(lives ==	0)
			Application.endGame("LOSE!");
		else
			lives--;
		System.out.println("General.die()");

	}
	
	//visszaadja, hogy van-e az ezredesn√©l m√©g dobboz
	public boolean hasBox(){
		System.out.println("General.hasBox()");
		return !boxes.isEmpty();
	}
	
	//visszaadja az utolj√°ra felvett dobozt
	public Box getBox(){
		System.out.println("General.getBox()");
		return boxes.get(boxes.size() - 1);
	}
	
	//az ezredest ell√©pteti az adott ir√°nyba, ha lehet
	public void move(Direction dir){
		System.out.println("General.move("+ dir +")");
		direction = dir;
			AbstractBlock block = PosBlock.getNeighbour(dir);
			if(block.isPassable()){
				PosBlock.notifyBlock();
				block.moveToThisBlock();
		}
	}
	//felveszi a dobozt, ha van el≈ëtte
	public void pick(){
		System.out.println("General.pick()");
		AbstractBlock b = PosBlock.getNeighbour(direction);
		//leellen≈ërizz√ºk, hogy visszaad-e dobozt. Ha igen akkor catolhatunk
		//k√ºl√∂nben elsz√°llna a program
		if(b.getBox() != null){
				boxes.add(b.getBox());
			}	
	}
	//lerakja maga el√© a dobozt, ha letudja
	public void drop(){
		System.out.println("General.drop()");

		if(PosBlock.getNeighbour(direction).isPassable()){
			AbstractBlock f = PosBlock.getNeighbour(direction);
			//megn√©zz√ºk, hogy van-e rajta doboz 
				if(hasBox())f.setBox(getBox());
		}
	}
	
	//kapott sz√≠n≈±t l≈
	public void shoot(Color col){
		System.out.println("General.shoot("+col+")");
		
		AbstractBlock bulletPos;
		
		for( bulletPos = PosBlock.getNeighbour(direction); bulletPos.isPassable(); bulletPos = bulletPos.getNeighbour(direction)){
			//elmegy a l√∂ved√©k ameddig nem √ºtk√∂zik valamibe.
		}
		//a blokk, amibe megakadt a l√∂ved√©k lekezeli, hogy r√°l≈ëttek 
		bulletPos.shootOnThisBlock(col, direction);
	}
	public void setallZpmCnt(int i) {
		this.allZPMCnt=i;
	}
}